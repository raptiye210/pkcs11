const pkcs11 = require('pkcs11js');

// SafeNet eG√ºven token i√ßin PKCS#11 mod√ºl√º yollarƒ±
const PKCS11_MODULES = [
    'C:\\Windows\\System32\\eTPKCS11.dll',
    'C:\\Windows\\SysWOW64\\eTPKCS11.dll',
    'C:\\Program Files\\SafeNet\\eToken\\libs\\eToken.dll',
    'C:\\Program Files (x86)\\SafeNet\\eToken\\libs\\eToken.dll'
];

class RealPKCS11TokenReader {
    constructor() {
        this.pkcs11Module = null;
        this.session = null;
        this.slot = null;
    }

    // PKCS#11 mod√ºl√ºn√º y√ºkle
    async loadPKCS11Module() {
        console.log('üîç PKCS#11 mod√ºl√º aranƒ±yor...');
        
        for (const modulePath of PKCS11_MODULES) {
            try {
                const fs = require('fs');
                if (fs.existsSync(modulePath)) {
                    console.log(`üìÅ PKCS#11 mod√ºl√º bulundu: ${modulePath}`);
                    
                    // PKCS#11 mod√ºl√ºn√º y√ºkle
                    const mod = new pkcs11.PKCS11();
                    mod.load(modulePath);
                    
                    // Ba≈ülat
                    mod.C_Initialize();
                    
                    this.pkcs11Module = mod;
                    console.log('‚úÖ PKCS#11 mod√ºl√º ba≈üarƒ±yla y√ºklendi!');
                    return true;
                }
            } catch (error) {
                console.log(`‚ö†Ô∏è ${modulePath} y√ºklenemedi: ${error.message}`);
            }
        }
        
        throw new Error('‚ùå Hi√ßbir PKCS#11 mod√ºl√º bulunamadƒ± veya y√ºklenemedi');
    }

    // USB token slot'larƒ±nƒ± bul
    async findTokenSlots() {
        if (!this.pkcs11Module) {
            throw new Error('PKCS#11 mod√ºl√º y√ºklenmemi≈ü');
        }

        console.log('üîç USB token slot\'larƒ± aranƒ±yor...');
        
        // T√ºm slot'larƒ± al (token var olan)
        const slots = this.pkcs11Module.C_GetSlotList(true);
        
        if (slots.length === 0) {
            throw new Error('‚ùå Hi√ßbir USB token bulunamadƒ±');
        }

        console.log(`üì± ${slots.length} adet USB token slot bulundu:`);
        
        // Her slot i√ßin bilgi al
        for (let i = 0; i < slots.length; i++) {
            const slotInfo = this.pkcs11Module.C_GetSlotInfo(slots[i]);
            const tokenInfo = this.pkcs11Module.C_GetTokenInfo(slots[i]);
            
            console.log(`\n  Slot ${i + 1}:`);
            console.log(`    Slot ID: ${slots[i]}`);
            console.log(`    A√ßƒ±klama: ${slotInfo.slotDescription.trim()}`);
            console.log(`    √úretici: ${slotInfo.manufacturerID.trim()}`);
            console.log(`    Token Etiketi: ${tokenInfo.label.trim()}`);
            console.log(`    Token √úreticisi: ${tokenInfo.manufacturerID.trim()}`);
            console.log(`    Token Modeli: ${tokenInfo.model.trim()}`);
            console.log(`    Seri No: ${tokenInfo.serialNumber.trim()}`);
            
            // ƒ∞lk token'ƒ± kullan
            if (i === 0) {
                this.slot = slots[i];
            }
        }

        return slots;
    }

    // USB token ile oturum a√ß
    async openSession(pin = '2945') {
        if (!this.pkcs11Module || this.slot === null) {
            throw new Error('Token slot se√ßilmemi≈ü');
        }

        console.log(`\nüîê Token oturumu a√ßƒ±lƒ±yor (Slot ${this.slot})...`);
        
        // Oturum a√ß
        this.session = this.pkcs11Module.C_OpenSession(this.slot, pkcs11.CKF_SERIAL_SESSION | pkcs11.CKF_RW_SESSION);
        console.log(`‚úÖ Oturum a√ßƒ±ldƒ±: ${this.session}`);
        
        // PIN ile giri≈ü yap
        console.log('üîë PIN ile giri≈ü yapƒ±lƒ±yor...');
        this.pkcs11Module.C_Login(this.session, pkcs11.CKU_USER, pin);
        console.log('‚úÖ PIN doƒürulandƒ±, oturum hazƒ±r!');
        
        return this.session;
    }

    // Token'daki t√ºm sertifikalarƒ± listele
    async listCertificates() {
        if (!this.session) {
            throw new Error('Oturum a√ßƒ±lmamƒ±≈ü');
        }

        console.log('\nüìú USB token\'daki sertifikalar aranƒ±yor...');
        
        // Sertifika nesnelerini ara
        this.pkcs11Module.C_FindObjectsInit(this.session, [{
            type: pkcs11.CKA_CLASS,
            value: pkcs11.CKO_CERTIFICATE
        }]);

        const certificateHandles = this.pkcs11Module.C_FindObjects(this.session);
        this.pkcs11Module.C_FindObjectsFinal(this.session);

        if (certificateHandles.length === 0) {
            console.log('‚ùå Token\'da hi√ß sertifika bulunamadƒ±');
            return [];
        }

        console.log(`‚úÖ ${certificateHandles.length} adet sertifika bulundu:\n`);

        const certificates = [];

        for (let i = 0; i < certificateHandles.length; i++) {
            const handle = certificateHandles[i];
            
            try {
                console.log(`üìã Sertifika ${i + 1}:`);
                console.log(`   Handle: ${handle}`);
                
                // Her √∂zniteliƒüi ayrƒ± ayrƒ± al
                try {
                    const labelAttr = this.pkcs11Module.C_GetAttributeValue(this.session, handle, [{ type: pkcs11.CKA_LABEL }]);
                    const label = labelAttr[0].value ? labelAttr[0].value.toString().trim() : 'No Label';
                    console.log(`   Etiket: ${label}`);
                } catch (e) {
                    console.log(`   Etiket: okunamadƒ± (${e.message})`);
                }
                
                try {
                    const subjectAttr = this.pkcs11Module.C_GetAttributeValue(this.session, handle, [{ type: pkcs11.CKA_SUBJECT }]);
                    const subject = subjectAttr[0].value ? this.parseDN(subjectAttr[0].value) : 'Unknown Subject';
                    console.log(`   Konu: ${subject}`);
                } catch (e) {
                    console.log(`   Konu: okunamadƒ± (${e.message})`);
                }
                
                try {
                    const issuerAttr = this.pkcs11Module.C_GetAttributeValue(this.session, handle, [{ type: pkcs11.CKA_ISSUER }]);
                    const issuer = issuerAttr[0].value ? this.parseDN(issuerAttr[0].value) : 'Unknown Issuer';
                    console.log(`   Veren: ${issuer}`);
                } catch (e) {
                    console.log(`   Veren: okunamadƒ± (${e.message})`);
                }
                
                try {
                    const serialAttr = this.pkcs11Module.C_GetAttributeValue(this.session, handle, [{ type: pkcs11.CKA_SERIAL_NUMBER }]);
                    const serialNumber = serialAttr[0].value ? serialAttr[0].value.toString('hex').toUpperCase() : 'Unknown';
                    console.log(`   Seri No: ${serialNumber}`);
                } catch (e) {
                    console.log(`   Seri No: okunamadƒ± (${e.message})`);
                }

                // Basit sertifika verisi
                const certData = {
                    handle: handle,
                    label: 'Token Certificate ' + (i + 1),
                    available: true
                };

                certificates.push(certData);
                console.log('   ‚úÖ Sertifika eri≈üilebilir\n');

            } catch (error) {
                console.error(`‚ö†Ô∏è Sertifika ${i + 1} okunamadƒ±:`, error.message);
            }
        }

        return certificates;
    }

    // DN (Distinguished Name) parse et
    parseDN(dnBuffer) {
        try {
            // Basit DN parsing - ger√ßek ASN.1 parsing yerine
            const dnStr = Buffer.from(dnBuffer).toString('utf8');
            return dnStr.replace(/[\\x00-\\x1F\\x7F-\\xFF]/g, '').trim() || 'Parse Error';
        } catch (error) {
            return 'Parse Error';
        }
    }

    // Private key'leri listele
    async listPrivateKeys() {
        if (!this.session) {
            throw new Error('Oturum a√ßƒ±lmamƒ±≈ü');
        }

        console.log('\nüîë USB token\'daki private key\'ler aranƒ±yor...');
        
        // Private key nesnelerini ara
        this.pkcs11Module.C_FindObjectsInit(this.session, [{
            type: pkcs11.CKA_CLASS,
            value: pkcs11.CKO_PRIVATE_KEY
        }]);

        const keyHandles = this.pkcs11Module.C_FindObjects(this.session);
        this.pkcs11Module.C_FindObjectsFinal(this.session);

        console.log(`üîê ${keyHandles.length} adet private key bulundu:\n`);

        for (let i = 0; i < keyHandles.length; i++) {
            const handle = keyHandles[i];
            
            try {
                console.log(`üîë Private Key ${i + 1}:`);
                console.log(`   Handle: ${handle}`);
                
                // Her √∂zniteliƒüi ayrƒ± ayrƒ± al
                try {
                    const labelAttr = this.pkcs11Module.C_GetAttributeValue(this.session, handle, [{ type: pkcs11.CKA_LABEL }]);
                    const label = labelAttr[0].value ? labelAttr[0].value.toString().trim() : 'No Label';
                    console.log(`   Etiket: ${label}`);
                } catch (e) {
                    console.log(`   Etiket: okunamadƒ± (${e.message})`);
                }
                
                try {
                    const keyTypeAttr = this.pkcs11Module.C_GetAttributeValue(this.session, handle, [{ type: pkcs11.CKA_KEY_TYPE }]);
                    const keyType = keyTypeAttr[0].value ? keyTypeAttr[0].value.readUInt32LE(0) : 'Unknown';
                    console.log(`   Key Type: ${keyType === pkcs11.CKK_RSA ? 'RSA' : 'Other (' + keyType + ')'}`);
                } catch (e) {
                    console.log(`   Key Type: okunamadƒ± (${e.message})`);
                }
                
                console.log(`   ‚úÖ Private Key eri≈üilebilir\n`);

            } catch (error) {
                console.error(`‚ö†Ô∏è Private Key ${i + 1} okunamadƒ±:`, error.message);
            }
        }

        return keyHandles;
    }

    // Temizlik
    async cleanup() {
        try {
            if (this.session) {
                this.pkcs11Module.C_Logout(this.session);
                this.pkcs11Module.C_CloseSession(this.session);
            }
            if (this.pkcs11Module) {
                this.pkcs11Module.C_Finalize();
            }
            console.log('‚úÖ PKCS#11 temizlendi');
        } catch (error) {
            console.log('‚ö†Ô∏è Temizleme hatasƒ±:', error.message);
        }
    }
}

// Ana fonksiyon
async function main() {
    const tokenReader = new RealPKCS11TokenReader();
    
    try {
        console.log('üöÄ GER√áEK PKCS#11 USB TOKEN OKUYUCU');
        console.log('=====================================');
        console.log('SafeNet eG√ºven USB token\'ƒ±ndan sertifika okuma\n');

        // 1. PKCS#11 mod√ºl√ºn√º y√ºkle
        await tokenReader.loadPKCS11Module();

        // 2. Token slot'larƒ±nƒ± bul
        await tokenReader.findTokenSlots();

        // 3. Token ile oturum a√ß
        await tokenReader.openSession('2945'); // PIN

        // 4. Sertifikalarƒ± listele
        const certificates = await tokenReader.listCertificates();

        // 5. Private key'leri listele
        await tokenReader.listPrivateKeys();

        console.log('\nüéâ ƒ∞≈ûLEM TAMAMLANDI!');
        console.log(`üìã Toplam ${certificates.length} sertifika bulundu`);
        console.log('üîê Token hazƒ±r, PDF imzalama i√ßin kullanƒ±labilir');

    } catch (error) {
        console.error('\n‚ùå HATA:', error.message);
        console.log('\nüõ†Ô∏è Sorun Giderme:');
        console.log('1. SafeNet eG√ºven USB token takƒ±lƒ± olduƒüundan emin olun');
        console.log('2. Token s√ºr√ºc√ºlerinin y√ºkl√º olduƒüunu kontrol edin');
        console.log('3. PIN kodunun doƒüru olduƒüundan emin olun (2945)');
        console.log('4. Uygulamayƒ± y√∂netici olarak √ßalƒ±≈ütƒ±rƒ±n');
    } finally {
        // Temizlik
        await tokenReader.cleanup();
    }
}

// √áalƒ±≈ütƒ±r
if (require.main === module) {
    main();
}

module.exports = { RealPKCS11TokenReader };
